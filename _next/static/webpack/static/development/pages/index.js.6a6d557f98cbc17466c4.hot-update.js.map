{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.6a6d557f98cbc17466c4.hot-update.js","sources":["webpack:///./src/createElementFromSource/createComponentFromSource.js"],"sourcesContent":["import memoize from \"fast-memoize\"\nimport * as is from \"react-is\"\n\nimport transformSource from \"./transformSource\"\nimport { resolverId } from \"../babel\"\n\n// eslint-disable-next-line no-new-func\nexport const createFunction = memoize(source => new Function(resolverId, source))\n\n/**\n * Evaluates passed source code, uses passed resolver to resolve imports.\n *\n * @param {String} source A string that contains the source code\n * @param {Function} resolver A function for the imports resolution\n */\nexport const evalSource = memoize((source, resolver) => {\n  const evalWithResolver = createFunction(source)\n\n  return evalWithResolver(resolver)\n})\n\n/**\n * Creates a valid React Component from source.\n *\n * @param {Object} babelConfig A config for Babel\n * @param {Function} resolver A function for the imports resolution\n * @param {Object} resolverContext A context of resolver, will be passed as second argument to it\n * @param {String} source A string that contains the source code\n */\nconst createComponentFromSource = (babelConfig, resolver, resolverContext, source) => {\n  const transformed = transformSource(babelConfig, source)\n\n  const resolverWithContext = importName => resolver(importName, resolverContext)\n  const component = evalSource(transformed, resolverWithContext)\n\n  if (!is.isValidElementType(component)) {\n    throw new Error(\"Render: your source should have a default export with a React component\")\n  }\n\n  return component\n}\n\nexport default createComponentFromSource\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;;;;;;;AAMA;AACA;AAEA;AACA;AAEA;;;;;;;;;AAQA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}